@page "/LoginPage"
@attribute [AllowAnonymous]

@using Syncfusion.Blazor.Inputs
@using BaseUI.Services
@using BaseUI.Data
@using BaseUI.Helpers
@using BaseUI.Components
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json;

@inject IHttpContextAccessor contextAccessor
@inject NavigationManager NavigationManager
@inject AuthenticationService autenticationService

<EditForm Model="@input" OnValidSubmit="@LoginAsync">
    <FluentValidator TValidator="LoginInputValidator" />

    <div class="row custom-full-center" style="
            background-image: url('images/img-01.jpg'); 
            min-height: 100vh; 
            background-repeat: no-repeat; 
            background-position: center; 
            background-size: cover;"> 
        <loginform>
            <h2 class="login-headers">Mi cuenta</h2>
            <div class="card-body">
                @*Username*@
                <label for="username">Username</label>
                <input id="username"
                       type="text"
                       placeholder="Email or Phone"
                       @bind="@input.UserName"
                       TabIndex="1">
                @*Password*@
                <label for="password">Password</label>
                <input id="password"
                       type="password"
                       placeholder="Password"
                       @bind="@input.Password"
                       TabIndex="2">
                @*Opciones*@
                <div class="form-inline mb-4">
                    <a class="links-help mx-2"
                       style="color: #7dc243; text-decoration: unset; cursor: pointer; font-size: 0.8rem;"
                       tabindex="5"
                       @onclick="@(e=>NavigateToAsync("/PasswordRecoveryPage"))">
                        ¿Olvidaste tu contraseña?
                    </a>
                    <span class="separador" style="color: #7dc243"> | </span>
                    <a class="links-help mx-2"
                       style="color: #7dc243; text-decoration: unset; cursor: pointer; font-size: 0.8rem;"
                       tabindex="6"
                       @onclick="@(e=>NavigateToAsync("/EmailRecoveryPage"))">
                        ¿Olvidaste tu email?
                    </a>
                </div>
                @*Acciones*@
                <div class="d-flex justify-content-center my-auto">
                    <button type="submit"
                            class="btn login-button text-white"
                            tabindex="3">
                        Ingresar
                    </button>
                </div>
            </div>
        </loginform>
    </div>
</EditForm>

<style>
    .content {
        padding: 0 !important;
        margin: 0 !important;
    }
</style>

@code {
    #region Vars

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [CascadingParameter]
    public MainLayout mainLayoutObj { get; set; }

    private bool VisibleProperty { get; set; } = false;

    public InputModel input { get; set; } = new InputModel();

    #endregion

    protected override async void OnInitialized()
    {
        #region Revisa el estado del logueo
        var authenticationState = await AuthenticationStateTask;
        if (authenticationState?.User?.Identity != null && authenticationState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"Identity/Account/Logout", forceLoad: true);
            return;
        }
        #endregion
    }

    public async Task LoginAsync()
    {
        try
        {
            input.UserName = input.UserName.Replace(" ", String.Empty);
            input.Password = input.Password.Replace(" ", String.Empty);
            if (string.IsNullOrEmpty(input.UserName) || string.IsNullOrEmpty(input.Password))
            {
                await mainLayoutObj.ShowCardMessage(MessageTypes.Warning, "Ingrese su usuario y contraseña.");
                return;
            }
            #region MyRegion

            await mainLayoutObj.ShowSpinner();
            var authenticationResult = await autenticationService.Authenticate(input.UserName, input.Password);
            if (!string.IsNullOrEmpty(authenticationResult.AccessToken))
            {
                var jsonStr = JsonConvert.SerializeObject(authenticationResult);
                NavigationManager.NavigateTo($"Identity/Account/Login?jsonStr={jsonStr}", forceLoad: true);
            }
            else
            {
                await mainLayoutObj.ShowCardMessage(MessageTypes.Warning, "Usuario o contraseña incorrectos. Intente nuevamente.");
            }

            #endregion
        }
        catch (Exception ex)
        {
            await mainLayoutObj.ShowCardMessage(MessageTypes.Error, ex.Message);
        }
        finally
        {
            await mainLayoutObj.HideSpinner();
        }
    }

    public async Task NavigateToAsync(string url)
    {
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
}
